const ZEROTRUST_LIST_MAX_ENTRIES_COUNT = 1000;
const IDENTIFIER = Deno.env.get("cf-zt-identifier");
const AUTH_TOKEN = Deno.env.get("cf-zt-auth-token");
const RULE_IDENTITY_EXPRESSION = Deno.env.get("cf-zt-rule-identity-expression");
const API_ENDPOINT = `https://api.cloudflare.com/client/v4/accounts/${IDENTIFIER}/gateway`;

if (IDENTIFIER === undefined) {
	console.error("❗ Missing `cf-zt-identifier` in env");
	Deno.exit(1);
}
if (AUTH_TOKEN === undefined) {
	console.error("❗ Missing `cf-zt-auth-token` in env");
	Deno.exit(1);
}

function padZero(x: number, y: number) {
	return String(x).padStart(String(y).length, "0");
}

export async function fetchZeroTrustLists() {
	const lists: string[] = [];
	const response = (await (await fetch(`${API_ENDPOINT}/lists`, {
		method: "GET",
		headers: {
			"Authorization": `Bearer ${AUTH_TOKEN}`,
			"Content-Type": "application/json",
		},
	})).json())?.result;
	if (response === undefined) {
		console.error("❗ Failed to fetch ZeroTrust Lists");
		Deno.exit(1);
	}
	for (const list of response) {
		if (list.type == "DOMAIN" && (list.name.startsWith("Adblock"))) {
			lists.push(list.id);
		}
	}
	return lists;
}

export async function fetchZeroTrustRules() {
	const rules: string[] = [];
	const response = (await (await fetch(`${API_ENDPOINT}/rules`, {
		method: "GET",
		headers: {
			"Authorization": `Bearer ${AUTH_TOKEN}`,
			"Content-Type": "application/json",
		},
	})).json())?.result;
	if (response === undefined) {
		console.error("❗ Failed to fetch ZeroTrust Rules");
		Deno.exit(1);
	}
	for (const rule of response) {
		if (rule.filters[0] === "dns" && (rule.name.startsWith("Adblock"))) {
			rules.push(rule.id);
		}
	}
	return rules;
}

export async function createZeroTrustLists(blocklist: Set<string>) {
	const createdLists: string[] = [];
	const currentTime = new Date(Date.now());
	const createdAt = currentTime.toISOString();
	const dt = `${padZero(currentTime.getMonth() + 1, 12)}/${padZero(currentTime.getDate(), 12)}`;
	const tm = `${padZero(currentTime.getHours(), 24)}:${padZero(currentTime.getMinutes(), 60)}`;
	const splittedLists = Array.from(blocklist).flatMap(function (_, index, array) {
		if (index % ZEROTRUST_LIST_MAX_ENTRIES_COUNT) {
			return [];
		} else {
			return [array.slice(index, index + ZEROTRUST_LIST_MAX_ENTRIES_COUNT)];
		}
	});

	for (const list of splittedLists) {
		const data = [];
		const index = padZero(createdLists.length + 1, splittedLists.length);
		console.log(`  ⌛ ${index} / ${splittedLists.length}`);

		for (const entry of list) {
			data.push(`{"value":"${entry}","created_at":"${createdAt}"}`);
		}
		const response = (await (await fetch(`${API_ENDPOINT}/lists`, {
			method: "POST",
			headers: {
				"Authorization": `Bearer ${AUTH_TOKEN}`,
				"Content-Type": "application/json",
			},
			body: `{"name":"Adblock ${dt} ${tm} ${index}",
					"description":"Generated by PrevDNS at ${dt} ${tm}",
					"type":"DOMAIN",
					"items":[${data.join()}]}`,
		})).json())?.result;

		if (response === undefined) {
			console.error("❗ Failed to create ZeroTrust List");
			Deno.exit(1);
		}
		createdLists.push(response.id);
	}
	return createdLists;
}

export async function createZeroTrustRules(lists: string[]) {
	const rules: string[] = [];
	const currentTime = new Date(Date.now());
	const dt = `${padZero(currentTime.getMonth() + 1, 12)}/${padZero(currentTime.getDate(), 12)}`;
	const tm = `${padZero(currentTime.getHours(), 24)}:${padZero(currentTime.getMinutes(), 60)}`;

	for (const list of lists) {
		const index = padZero(rules.length + 1, lists.length);
		console.log(`  ⌛ ${index} / ${lists.length}`);
		const response = (await (await fetch(`${API_ENDPOINT}/rules`, {
			method: "POST",
			headers: {
				"Authorization": `Bearer ${AUTH_TOKEN}`,
				"Content-Type": "application/json",
			},
			body: `{"name":"Adblock ${dt} ${tm} ${index}",
					"description":"Generated by PrevDNS at ${dt} ${tm}",
					"action":"block",
					"enabled":true,
					"filters":["dns"],
					"traffic":"dns.fqdn in $${list}"
					${RULE_IDENTITY_EXPRESSION ? `,"identity":"${RULE_IDENTITY_EXPRESSION}"` : ""}
				}`,
		})).json())?.result;
		if (response === undefined) {
			console.error(`❗ Failed to create ZeroTrust Rule`);
			Deno.exit(1);
		}
		rules.push(response.id);
	}
	return rules;
}

export async function removeZeroTrustLists(lists: string[]) {
	let index = 1;
	for (const list of lists) {
		console.log(`  ⌛ ${padZero(index, lists.length)} / ${lists.length}`);
		const response = (await (await fetch(`${API_ENDPOINT}/lists/${list}`, {
			method: "DELETE",
			headers: {
				"Authorization": `Bearer ${AUTH_TOKEN}`,
				"Content-Type": "application/json",
			},
		})).json())?.success;
		if (response === undefined || response === false) {
			console.error(`❗ Failed to remove ZeroTrust List (${list.split("-")[0]})`);
			Deno.exit(1);
		}
		index++;
	}
}

export async function removeZeroTrustRules(rules: string[]) {
	let index = 1;
	for (const rule of rules) {
		console.log(`  ⌛ ${padZero(index, rules.length)} / ${rules.length}`);
		const response = (await (await fetch(`${API_ENDPOINT}/rules/${rule}`, {
			method: "DELETE",
			headers: {
				"Authorization": `Bearer ${AUTH_TOKEN}`,
				"Content-Type": "application/json",
			},
		})).json())?.success;
		if (response === undefined || response === false) {
			console.error(`❗ Failed to remove ZeroTrust Rule (${rule.split("-")[0]})`);
			Deno.exit(1);
		}
		index++;
	}
}
